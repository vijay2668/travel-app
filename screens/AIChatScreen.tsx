import { useUser } from "@clerk/clerk-expo";
import { Ionicons } from "@expo/vector-icons";
import { RouteProp, useNavigation, useRoute } from "@react-navigation/native";
import React, { useState } from "react";
import {
  ActivityIndicator,
  Alert,
  KeyboardAvoidingView,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from "react-native";
import axios from "axios";
import { HomeStackParamList } from "../navigation/HomeStack";

const suggestions = [
  "Best Places to eat in",
  "3 Day Itinerary to",
  "Top Attractions in"
];

const AIChatScreen = () => {
  const route = useRoute<RouteProp<HomeStackParamList, "AIChat">>();
  const { location } = route.params;
  const navigation = useNavigation();
  const { user } = useUser();
  const [messages, setMessages] = useState<
    {
      from: "user" | "ai";
      text: string;
    }[]
  >([]);

  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);

  const sendMail = async (message: string) => {};

  const askAI = async (query: string) => {
    setMessages((prev) => [...prev, { from: "user", text: query }]);
    setInput("");
    setLoading(true);

    try {
      const res = await axios.post(
        "https://generativelanguage.googleapis.com/v1beta/openai/chat/completions",
        {
          model: "gemini-2.0-flash",
          messages: [
            {
              role: "system",
              content: `You are a travel assistant for ${location}`
            },
            { role: "user", content: query }
          ]
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.EXPO_PUBLIC_GEMINI_API_KEY}`
          }
        }
      );

      const reply = res.data.choices[0].message.content;
      setMessages((prev) => [...prev, { from: "ai", text: reply }]);
    } catch (err) {
      console.log("Error", err);
      setMessages((prev) => [
        ...prev,
        { from: "ai", text: "Sorry, I couldn't fetch a response" }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const sendEmail = async (message: string) => {
    const email = user?.primaryEmailAddress?.emailAddress;
    if (!email) {
      Alert.alert(
        "Error",
        "User email not found. Please ensure you're logged in."
      );
      return;
    }

    Alert.alert(
      "Sent to Email",
      `Do you want to send this response to ${email}?`,
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Send",
          onPress: async () => {
            try {
              const response = await axios.post(
                process.env.EXPO_PUBLIC_BACKEND_URL + "/send-email",
                {
                  email,
                  subject: `Travel Assistant Response for ${location}`,
                  message
                }
              );

              Alert.alert("Success", response.data.message);
            } catch (err: any) {
              console.error("Error sending email:", err);
              Alert.alert(
                "Error",
                err.response?.data?.error || "Failed to send email"
              );
            }
          }
        }
      ]
    );
  };

  return (
    <View className="flex-1 bg-white pt-14 px-4">
      <View className="flex-row items-center mb-4">
        <TouchableOpacity>
          <Ionicons name="arrow-back" color={"#000"} size={28} />
        </TouchableOpacity>
        <Text className="ml-4 text-lg font-semibold">AI Assistant </Text>
      </View>

      <View className="bg-orange-100 p-3 rounded-md mb-2">
        <Text className="text-sm text-orange-600 font-medium">
          4 messages left <Text className="underline">Get More</Text>
        </Text>
      </View>

      <View className="bg-blue-50 p-3 rounded-md mb-4 mt-2">
        <Text className="text-sm text-orange-600 font-medium">
          The AI Assistant is purely informational. It does not have edit access
          to your trip plan
        </Text>
        <Text className="text-sm text-blue-600 mt-1 font-medium">
          Information generated by AI Assistant may not be fully accurate
        </Text>
      </View>

      <View className="mb-4">
        <Text className="font-semibold">
          Don't know what to ask? Try these examples.
        </Text>
        <View className="flex-row flex-wrap gap-2">
          {suggestions.map((q, index) => (
            <TouchableOpacity
              key={index}
              onPress={() => askAI(`${q} ${location}`)}
              className="bg-gray-100 px-4 py-2 rounded-full mb-2 mt-1"
            >
              <Text className="text-sm text-gray-800 line-clamp-1">
                {q} {location}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      <ScrollView>
        {messages?.map((msg, idx) => (
          <View key={idx} className="mb-3">
            <View
              className={`p-3 rounded-lg ${
                msg.from === "user"
                  ? "bg-gray-100 self-end"
                  : "bg-orange-50 self-start"
              }`}
            >
              <Text className="text-sm">{msg.text} </Text>
            </View>
            {msg.from == "ai" && (
              <TouchableOpacity
                onPress={() => sendEmail(msg.text)}
                className="self-start mt-1"
              >
                <Ionicons name="mail" size={20} color={"#007AFF"} />
              </TouchableOpacity>
            )}
          </View>
        ))}

        {loading && (
          <View className="bg-orange-50 self-start p-3 rounded-lg mb-3">
            <ActivityIndicator size={"small"} color={"orange"} />
          </View>
        )}
      </ScrollView>

      <KeyboardAvoidingView behavior={"padding"}>
        <View className="flex-row items-center border rounded-full px-4 py-2 mb-4 bg-gray-50">
          <TextInput
            placeholder="Ask any travel related questions"
            className="flex-1 text-sm"
            value={input}
            onChangeText={setInput}
          />
          <TouchableOpacity
            onPress={() => askAI(input)}
            disabled={!input.trim()}
          >
            <Ionicons name="arrow-forward" size={24} color="black" />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </View>
  );
};

export default AIChatScreen;

const styles = StyleSheet.create({});
